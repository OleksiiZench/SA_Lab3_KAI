//www.plantuml.com/plantuml/png/nLTHRo8t47xdLrYgLC6sGNq-fUYY9FGYaKjqfEhZQbW6s9xNHhOXfKt_UxqUlDYEWQjukBomEz-tC-FFdsSt7xK1PJODx_LgOL0je4Bsy3JJgBQeUl_qcFtxQIlhEVjzFGU3_KeARPWsymyVj56rMFx86jGQbZZe_HjbcMvcVs9beYGtna2rwdSL2YRtLuE0TOVVmleiJRtOdMkeug0rkn5r0zpdOtMpvjYWCFgYnL9MLbnTiVkjpLO-Wh2OOin3m-7Rg5E2CTzEn8u5ci_BIQqD2bHzLtYn4PMffRXkyVvWn2hWV0RLrr2B5rKlRQhI9UuFUWwwSizlRMMfhhEvHipNqgbMNLUrzGTmHcLa-GVmh_q1-vNzqYE21-x15ev3jnn1-E1CIiv-GrC-wFA6rrlC0PzWlTvb05VMwf-1uYgrC2x-YC3BPrJb7UnIxALki9pMei9o0fgudXFijUD-XWOjzlqiV6WzND8XcbjCe97NnsxO0hZ6VRxOha-Y72FEyn0zVmm3jK_vWo_dzZOA-SsZODlq_GxruUuPNlNUiUu9xmCAXJlIxaR6smULHvtCEZYWrs_sXDx99HdSNNbtHwwEOrysMU_Qi20dHYtxU5hs5WIe7LNsD_dYSN1ADQBOcE-85xVakFd3qJxohjbFOBV4HdKGEsI9W_HykgX9_JUeEItAttpBecuLlF9CcmJaLFL0EfxAYQoW7MNfd4eFS49FHnTDN2Br_Jm7znkA_mKvWiRpnFOSdMUv8tMI5jgR2CKeM8_kXCeIzoJQjcZzj7zFhm8LwKdNNiMpwXrD-MpPKzi4KjhW_l-afcTVLWfXddq_JWqewnXHAMnGq2pl3oA2N9_6GVdYLC4HZxnhWNWDTV8pksys7EogMB4sgaHxbzREf3x--d7DT5lfSaIjvtXqDgZMcCFoiDWiIkq4Nh7jDtLrRRiPiRH4G3Dk3y9sNE0zWmfusEvXfv6qjeYtah4OJJoG0tCnF-w33oeYvRpYeVuWEVHZXKSETBGXqvLytTEir0kPSWDgVkizQbyx8LIjGB5g9UiAGnQz8iuJzsFtF96yu5M8JNJ_LstAPoMN2XeAjoPD31KUt0dCa9yOF86c-jHyuZncMMrOqGhqWisQGYG4A-Wt06ZXhA3V072JZ1Nkf_CKGTqqOaLtcL0IBzh26wLQunEGi1DV5rxVCWPwOUxttuBjSRcLGakEvIEAZVDuPtWMOyEX7-mnGayz43I6LkdTuMI4nCpfQCFn0BfL2AOMVd8G8_KnaQH8KU_VB27oRKeWXbzx8AXNyh8jZlyrZRJogb2m806GxdAVvW8QfAy8cpIH_VfjE6m5ygbpC2bqYa4IUSRXg_M2XeEtQrp_ibpKwQMvKZE7QqsnfFqKJhNxY6A-QNZlFm00

@startuml

interface IObserver
{
    +void Update(const std::string& message)
}

interface ISubject
{
    +void Attach(IObserver* observer)
    +void Detach(IObserver* observer)
    +void Notify(const std::string& message)
}

class AnimalObserver implements IObserver
{
    +void Update(const std::string& message)
}

Animal *-- Event_Manager
Animal ..|> ISubject

class Event_Manager
{
    +void Add_Listener(std::function<void()> callback)
    +void Trigger_Event()

    -std::vector<std::function<void()>> Listeners
}

class Animal
{
    +virtual void To_Walk() = 0

    +void To_Eat()
    +void To_Clean()
    +bool Get_Is_Alive()
    +bool Get_Is_Happy()
    +bool Get_Is_Walking()
    +bool Get_Is_Clean()
    +int Get_Meal_Per_Day()
    +int Get_Time_Since_Last_Meal()
    +std::string Get_Name()

    +void Attach(IObserver* observer)
    +void Detach(IObserver* observer)
    +void Notify(const std::string& message)

    +int Meal_Per_Day
    +int Time_Since_Last_Meal
    +bool Is_Clean = false

    +Event_Manager On_Feed
    +Event_Manager On_Clean
    +Event_Manager On_Care

    #bool Is_Alive
    #bool Is_Walking
    #int Eyes
    #int Paws

    -bool Is_Happy
    -std::string Name

    -std::vector<IObserver*> observers
}

Animal <|-- Dog
class Dog
{
    +void To_Walk()
    +void To_Run()
    +bool Get_Is_Running()

    -bool Is_Running
}

Animal <|-- Canary
class Canary
{
    +void To_Walk()

    +void To_Sing()
    +void To_Fly()

    +bool Get_Is_Singing()
    +bool Get_Is_Flying()

    -bool Has_Wings
    -bool Is_Singing
    -bool Is_Flying
}

Animal <|-- Lizard
class Lizard
{
    +void To_Walk()

    +void To_Crawl()
    +bool Get_Is_Crawling()

    -bool Is_Crawling
}

class Animal_Location
{
    +virtual std::string Get_Animal_Location() = 0

    +void Add_Animal(Animal *animal)
    +void Release_Animal(Animal *animal)
    +void Feed_Animal(Animal *animal)
    +void Clean_Animal(Animal *animal)
    +std::vector<Animal*> Get_Animals()

    -std::vector<Animal*> Animals
}

Animal_Location <|-- Owner
class Owner
{
    +std::string Get_Animal_Location()
}

Animal_Location <|-- Pet_Store
class Pet_Store
{
    +std::string Get_Animal_Location()
}

class Thread_Manager
{
    +void Start_Increment_Time()
    +void Stop_Increment_Time()
    +void Start_Animal_Management(std::function<void()> animal_manager, Emulator *ptr_emul)
    +void Stop_Animal_Management()
    +int Get_Time_Since_Start()

    -void Increment_Time_Since_Start()

    -bool Stop_Flag_Increment
    -bool Stop_Flag_Animal
    -std::atomic<int> Time_Since_Start
    -std::thread Increment_Thread
    -std::thread Animal_Thread
}

Emulator o-- Thread_Manager
Emulator o-- Animal_Location
Emulator o-- Animal
Emulator o-- AnimalObserver

class Emulator
{
    +void Start_Emulator()
    +void Add_Free_Animal(Animal *animal)

    -void Show_Animal_Info(Animal *animal)
    -void Animal_Management()
    -void Dog_Management(char choice)
    -void Canary_Management(char choice)
    -void Lizard_Management(char choice)
    -void Stop_Emulator()

    -bool Exit_Program
    -int Increment
    -std::string Label
    -std::vector<Animal*> Free_Animals
    -std::vector<Animal*> All_Animals
    -Dog *Dog_Temp
    -Canary *Canary_Temp
    -Lizard *Lizard_Temp
    -Owner *Owner_Location
    -Pet_Store *Pet_Store_Location
    -Animal_Location *Current_Animal_Location
    -Thread_Manager *Emulator_Thread_Manager

    -AnimalObserver* observer
}

Console_Menu o-- Emulator
Console_Menu ..> Animal
Console_Menu o-- IAnimalFactory

class Console_Menu
{
    +void Start_Menu()

    -void Creating_Animal_Menu()
    -void Dog_Creation_Menu()
    -void Canary_Creation_Menu()
    -void Lizard_Creation_Menu()

    -Emulator *Emulator_Manager
    -Owner *Owner_Location
    -Pet_Store *Pet_Store_Location
}

interface IAnimalFactory
{
    +Animal* CreateAnimal(const std::string& name) = 0
}

IAnimalFactory <|.. DogFactory
IAnimalFactory <|.. CanaryFactory
IAnimalFactory <|.. LizardFactory

class DogFactory
{
    +Animal* CreateAnimal(const std::string& name)
}

class CanaryFactory
{
    +Animal* CreateAnimal(const std::string& name)
}

class LizardFactory
{
    +Animal* CreateAnimal(const std::string& name)
}

Console_Menu o-- DogFactory
Console_Menu o-- CanaryFactory
Console_Menu o-- LizardFactory

@enduml
